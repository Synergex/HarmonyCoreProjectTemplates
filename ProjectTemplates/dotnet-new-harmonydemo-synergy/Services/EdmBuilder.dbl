;;*****************************************************************************
;;
;; Title:       EdmBuilder.dbl
;;
;; Description: Builds a Harmony Core Enterprise Data Model (EDM)
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.OData
import Microsoft.EntityFrameworkCore
import Microsoft.OData.Edm
import Microsoft.AspNetCore.Mvc
import System.Collections.Generic
import Services.Models
import Microsoft.OData.ModelBuilder

namespace Services

    ;;; <summary>
    ;;; Builds an entity framework entity data model.
    ;;; </summary>
    public partial class EdmBuilder implements IEdmBuilder

        static method EdmBuilder
        proc
            CustomStaticEdmInit()

            if(mEdmVersions.Count == 0)
                mEdmVersions.Add(1)
        endmethod

        public method EdmBuilder
            serviceProvider, @IServiceProvider
        proc
            mServiceProvider = serviceProvider
        endmethod

        public virtual method BuildModel, @IEdmModel
            modelBuilder, @ODataModelBuilder 
            endparams
        proc
            mreturn GetEdmModel(modelBuilder, mServiceProvider)
        endmethod

        private mServiceProvider, @IServiceProvider
        private static mEdmModels, @Dictionary<int, IEdmModel>, new Dictionary<int, IEdmModel>()
        private static mEdmVersions, @List<int>, new List<int>()

        public static method GetEdmModel, @IEdmModel
            required in serviceProvider, @IServiceProvider
            required in versionNumber, int
        proc
            if(!mEdmModels.ContainsKey(versionNumber))
            begin
                FillVersionedEdmModels(serviceProvider, versionNumber)

                if(!mEdmModels.ContainsKey(versionNumber))
                begin
                    data madeModel = GetEdmModel(new ODataConventionModelBuilder(), serviceProvider)
                    mEdmModels.Add(versionNumber, madeModel)
                end
            end
            mreturn mEdmModels[versionNumber]
        endmethod

        public static property EdmVersions, @IEnumerable<int>
            method get
            proc
                mreturn mEdmVersions
            endmethod
        endproperty

        private static partial method FillVersionedEdmModels, void
            required in serviceProvider, @IServiceProvider
            required in versionNumber, int
        endmethod

        private static partial method CustomStaticEdmInit, void
        
        endmethod

        ;;; <summary>
        ;;; Gets the entity data model.
        ;;; </summary>
        private static method GetEdmModel, @IEdmModel
            required in builder, @ODataModelBuilder
            required in serviceProvider, @IServiceProvider
        proc
            ;;Declare entities
            builder.EntitySet<Customers>("Customers")
            builder.EntitySet<Items>("Items")
            builder.EntitySet<Orders>("Orders")
            builder.EntitySet<OrderItems>("OrderItems")
            builder.EntitySet<Vendors>("Vendors")

            ;;Entities with a single primary key segment have the key declared to EF via a
            ;;{Key} attribute on the appropriate property in the data model, but only one {key}
            ;;attribute can be used in a class, so keys with multiple segments are defined
            ;;using the "Fluent API" here.
            builder.EntityType<OrderItems>().HasKey<OrderItems,int>("OrderNumber")
            builder.EntityType<OrderItems>().HasKey<OrderItems,int>("ItemNumber")
 
            ;;-----------------------------------------------
            ;;If we have a GetEdmModelCustom method, call it 

            GetEdmModelCustom(serviceProvider, builder)

            ;;-----------------------------------------------

            data tempModel = (@EdmModel)builder.GetEdmModel()

            data customersType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Customers")
            tempModel.AddAlternateKeyAnnotation(customersType, new Dictionary<string, IEdmProperty>() {{"State",customersType.FindProperty("State")}})
            tempModel.AddAlternateKeyAnnotation(customersType, new Dictionary<string, IEdmProperty>() {{"ZipCode",customersType.FindProperty("ZipCode")}})
            tempModel.AddAlternateKeyAnnotation(customersType, new Dictionary<string, IEdmProperty>() {{"PaymentTermsCode",customersType.FindProperty("PaymentTermsCode")}})

            data itemsType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Items")
            tempModel.AddAlternateKeyAnnotation(itemsType, new Dictionary<string, IEdmProperty>() {{"VendorNumber",itemsType.FindProperty("VendorNumber")}})
            tempModel.AddAlternateKeyAnnotation(itemsType, new Dictionary<string, IEdmProperty>() {{"FlowerColor",itemsType.FindProperty("FlowerColor")}})
            tempModel.AddAlternateKeyAnnotation(itemsType, new Dictionary<string, IEdmProperty>() {{"Size",itemsType.FindProperty("Size")}})
            tempModel.AddAlternateKeyAnnotation(itemsType, new Dictionary<string, IEdmProperty>() {{"CommonName",itemsType.FindProperty("CommonName")}})

            data ordersType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Orders")
            tempModel.AddAlternateKeyAnnotation(ordersType, new Dictionary<string, IEdmProperty>() {{"CustomerNumber",ordersType.FindProperty("CustomerNumber")}})
            tempModel.AddAlternateKeyAnnotation(ordersType, new Dictionary<string, IEdmProperty>() {{"DateOrdered",ordersType.FindProperty("DateOrdered")}})
            tempModel.AddAlternateKeyAnnotation(ordersType, new Dictionary<string, IEdmProperty>() {{"DateCompleted",ordersType.FindProperty("DateCompleted")}})

            data orderItemsType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.OrderItems")
            tempModel.AddAlternateKeyAnnotation(orderItemsType, new Dictionary<string, IEdmProperty>() {{"ItemOrdered",orderItemsType.FindProperty("ItemOrdered")}})
            tempModel.AddAlternateKeyAnnotation(orderItemsType, new Dictionary<string, IEdmProperty>() {{"DateShipped",orderItemsType.FindProperty("DateShipped")}})
            tempModel.AddAlternateKeyAnnotation(orderItemsType, new Dictionary<string, IEdmProperty>() {{"InvoiceNumber",orderItemsType.FindProperty("InvoiceNumber")}})

            data vendorsType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Vendors")
            tempModel.AddAlternateKeyAnnotation(vendorsType, new Dictionary<string, IEdmProperty>() {{"State",vendorsType.FindProperty("State")}})
            tempModel.AddAlternateKeyAnnotation(vendorsType, new Dictionary<string, IEdmProperty>() {{"ZipCode",vendorsType.FindProperty("ZipCode")}})
            tempModel.AddAlternateKeyAnnotation(vendorsType, new Dictionary<string, IEdmProperty>() {{"PaymentTermsCode",vendorsType.FindProperty("PaymentTermsCode")}})

            ;;-----------------------------------------------
            ;;If we have a PostEdmModelCustom method, call it 

            PostEdmModelCustom(serviceProvider, tempModel)

            ;;-----------------------------------------------

            mreturn tempModel

        endmethod

        ;;Declare the GetEdmModelCustom partial method
        ;;This method can be implemented in a partial class to provide custom EDM configuration code
        partial static method GetEdmModelCustom, void
            required in serviceProvider, @IServiceProvider
            required in builder, @ODataModelBuilder
        endmethod

        ;;Declare the PostEdmModelCustom partial method
        ;;This method can be implemented in a partial class to provide custom EDM configuration code
        partial static method PostEdmModelCustom, void
            required in serviceProvider, @IServiceProvider
            required in model, @EdmModel
        endmethod

    endclass

endnamespace
