;;*****************************************************************************
;;
;; Title:       SelfHostEnvironment.dbl
;;
;; Description: Environment setup class for a Harmony Core self host program
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore
import Microsoft.AspNetCore.Hosting
import System.Collections.Generic
import System.IO
import System.Runtime.InteropServices
import System.Text
import Services
import Services.Models

namespace Services.Host

    public partial static class SelfHostEnvironment

        ;;Declare the InitializeCustom partial method
        ;;This method can be implemented in a partial class to provide custom code to initialize the self hosting environment
        partial static method InitializeCustom, void

        endmethod

        public static method Initialize, void

        proc
            ;;Allows select to join when the keys in the file are not the same type as the keys in the code
            data status, int
            xcall setlog("SYNSEL_NUMALPHA_KEYS", 1, status)

            ;;Allows connections to older xfServer services
            xcall setlog("SRV_COMPAT", 1, status)

            ;;Configure the test environment (set logicals, create files in a known state, etc.)
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)
            setLogicals()
            deleteFiles()
            createFiles()

            ;;If we have an InitializeCustom method, call it
            InitializeCustom()

        endmethod

        ;;Declare the CleanupCustom partial method
        ;;This method can be implemented in a partial class to provide custom code to cleanup the self hosting environment before close
        partial static method CleanupCustom, void

        endmethod

        public static method Cleanup, void

        proc
            ;;Delete the data files
            deleteFiles()

            ;;If we have a CleanupCustom method, call it
            CleanupCustom()

        endmethod

        ;;Declare the SetLogicalsCustom partial method
        ;;This method can be implemented in a partial class to provide custom code to define logical names
        partial static method SetLogicalsCustom, void
            required in logicals, @List<string>
        endmethod

        private static method setLogicals, void
        proc
            data sampleDataFolder = findRelativeFolderForAssembly("SampleData")
            Startup.LogicalNames = new List<string>()
            data logical = String.Empty
            data fileSpec = String.Empty

            fileSpec = "DAT:customers.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:items.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:orders.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:order_items.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            fileSpec = "DAT:vendors.ism"
            if (fileSpec.Contains(":")) then
            begin
                logical = fileSpec.Split(":")[1].ToUpper()
                if (!Startup.LogicalNames.Contains(logical))
                    Startup.LogicalNames.Add(logical)
            end
            else if (!fileSpec.Contains("."))
            begin
                if (!Startup.LogicalNames.Contains(fileSpec))
                    Startup.LogicalNames.Add(fileSpec)
            end

            ;;If we have a SetLogicalsCustom method, call it
            SetLogicalsCustom(Startup.LogicalNames)

            ;;Now we'll check each logical. If it already has a value we'll do nothing, otherwise
            ;;we'll set the logical to point to the local folder whose name is identified by the
            ;;user-defined token DATA_FOLDER
            foreach logical in Startup.LogicalNames
            begin
                data sts, int
                data translation, a80
                ;;Is it set?
                xcall getlog(logical,translation,sts)
                if (!sts)
                begin
                    ;;No, we'll set it to SampleData
                    xcall setlog(logical,sampleDataFolder,sts)
                end
            end

        endmethod

        private static method createFiles, void
        proc
            data chout, int
            data dataFile, string
            data fileExtension, a10
            data xdlFile, string

            data customersData = loadCustomers()
            data itemsData = loadItems()
            data ordersData = loadOrders()
            data orderItemsData = loadOrderItems()
            data vendorsData = loadVendors()

            ;;Create and load the customers file

            dataFile = "DAT:customers.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data customers, @Customers
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach customers in customersData
                store(chout,customers.SynergyRecord)
            close chout

            ;;Create and load the items file

            dataFile = "DAT:items.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data items, @Items
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach items in itemsData
                store(chout,items.SynergyRecord)
            close chout

            ;;Create and load the orders file

            dataFile = "DAT:orders.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data orders, @Orders
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach orders in ordersData
                store(chout,orders.SynergyRecord)
            close chout

            ;;Create and load the orderItems file

            dataFile = "DAT:order_items.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data orderItems, @OrderItems
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach orderItems in orderItemsData
                store(chout,orderItems.SynergyRecord)
            close chout

            ;;Create and load the vendors file

            dataFile = "DAT:vendors.ism"
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            xdlFile = "@" + dataFile.ToLower().Replace(%atrim(fileExtension),".xdl")

            data vendors, @Vendors
            open(chout=0,o:i,dataFile,FDL:xdlFile)
            foreach vendors in vendorsData
                store(chout,vendors.SynergyRecord)
            close chout

        endmethod

        private static method deleteFiles, void
        proc
            ;;Delete the customers file
            try
            begin
                xcall delet("DAT:customers.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the items file
            try
            begin
                xcall delet("DAT:items.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the orders file
            try
            begin
                xcall delet("DAT:orders.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the orderItems file
            try
            begin
                xcall delet("DAT:order_items.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

            ;;Delete the vendors file
            try
            begin
                xcall delet("DAT:vendors.ism")
            end
            catch (e, @NoFileFoundException)
            begin
                nop
            end
            endtry

        endmethod

        public static method loadCustomers, @List<Customers>
        proc
            data dataFile = "DAT:customers.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT")), 161)
            data customersCh, int, 0
            data customersRec, strCustomers
            data customersData = new List<Customers>()
            data grfa, a10
            open(customersCh,i:s,textFile)
            repeat
            begin
                reads(customersCh,customersRec,eof)
                customersData.Add(new Customers(customersRec, grfa))
            end
        eof,
            close customersCh
            mreturn customersData
        endmethod

        public static method loadItems, @List<Items>
        proc
            data dataFile = "DAT:items.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT")), 151)
            data itemsCh, int, 0
            data itemsRec, strItems
            data itemsData = new List<Items>()
            data grfa, a10
            open(itemsCh,i:s,textFile)
            repeat
            begin
                reads(itemsCh,itemsRec,eof)
                itemsData.Add(new Items(itemsRec, grfa))
            end
        eof,
            close itemsCh
            mreturn itemsData
        endmethod

        public static method loadOrders, @List<Orders>
        proc
            data dataFile = "DAT:orders.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT")), 100)
            data ordersCh, int, 0
            data ordersRec, strOrders
            data ordersData = new List<Orders>()
            data grfa, a10
            open(ordersCh,i:s,textFile)
            repeat
            begin
                reads(ordersCh,ordersRec,eof)
                ordersData.Add(new Orders(ordersRec, grfa))
            end
        eof,
            close ordersCh
            mreturn ordersData
        endmethod

        public static method loadOrderItems, @List<OrderItems>
        proc
            data dataFile = "DAT:order_items.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT")), 100)
            data orderItemsCh, int, 0
            data orderItemsRec, strOrderItems
            data orderItemsData = new List<OrderItems>()
            data grfa, a10
            open(orderItemsCh,i:s,textFile)
            repeat
            begin
                reads(orderItemsCh,orderItemsRec,eof)
                orderItemsData.Add(new OrderItems(orderItemsRec, grfa))
            end
        eof,
            close orderItemsCh
            mreturn orderItemsData
        endmethod

        public static method loadVendors, @List<Vendors>
        proc
            data dataFile = "DAT:vendors.ism"
            data fileExtension, a10
            xcall parse(dataFile.ToLower(),1,,,,,fileExtension)
            data textFile = dataFile.ToLower().Replace(%atrim(fileExtension),".txt")
			EnsurePlatformSpecificLineEndings(textFile.Replace(":", System.IO.Path.DirectorySeparatorChar).Replace("dat", Environment.GetEnvironmentVariable("DAT")), 135)
            data vendorsCh, int, 0
            data vendorsRec, strVendors
            data vendorsData = new List<Vendors>()
            data grfa, a10
            open(vendorsCh,i:s,textFile)
            repeat
            begin
                reads(vendorsCh,vendorsRec,eof)
                vendorsData.Add(new Vendors(vendorsRec, grfa))
            end
        eof,
            close vendorsCh
            mreturn vendorsData
        endmethod

        private static method findRelativeFolderForAssembly, string
            folderName, string
        proc
            data assemblyLocation = ^typeof(SelfHostEnvironment).Assembly.Location
            data currentFolder = Path.GetDirectoryName(assemblyLocation)
            data rootPath = Path.GetPathRoot(currentFolder)
            while(currentFolder != rootPath)
            begin
                if(Directory.Exists(Path.Combine(currentFolder, folderName))) then
                    mreturn Path.Combine(currentFolder, folderName)
                else
                begin
                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) then
                        currentFolder = Path.GetFullPath(currentFolder + "..\")
                    else
                        currentFolder = Path.GetFullPath(currentFolder + "../")
                end
            end
            mreturn ^null
        endmethod

		public static method EnsurePlatformSpecificLineEndings, void
            filePath, string
            minLineLength, int
        proc
            data content = File.ReadAllBytes(filePath)
            data allBytes, @List<byte>, new List<byte>()
            data lineBytes, @List<byte>, new List<byte>()
            data i = 1
            while (i <= content.Length)
            begin 
                data c, char
                c = %char(content[i])
                if (c == %char(13) || c == %char(10)) then
                begin
                    allBytes.AddRange(lineBytes)

                    if (lineBytes.Count >= minLineLength) then
                    begin
                        allBytes.AddRange(Encoding.ASCII.GetBytes(Environment.NewLine))
                        if (c == %char(13) && i + 1 <= content.Length && %char(content[i + 1]) == %char(10))
                            i = i + 1
                    end
                    else
                    begin
                        if (c == %char(13) && i + 1 <= content.Length && %char(content[i + 1]) == %char(10)) then
                        begin
                            allBytes.AddRange(Encoding.ASCII.GetBytes(Environment.NewLine))
                            i = i + 1
                        end
                        else
                        begin
                            allBytes.Add(content[i])
                        end
                    end
                    lineBytes.Clear()
                end
                else
                begin
                    lineBytes.Add(content[i])
                end
                
                i = i + 1
            end

            allBytes.AddRange(lineBytes)
            File.WriteAllBytes(filePath, allBytes.ToArray())
        endmethod

    endclass

endnamespace
