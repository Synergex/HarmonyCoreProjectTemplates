;;*****************************************************************************
;;
;; Title:       CustomersController.dbl
;;
;; Description: OData controller for the CUSTOMERS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData.Routing.Controllers
import Microsoft.AspNetCore.OData.Routing.Attributes
import Microsoft.AspNetCore.OData.Query
import Microsoft.AspNetCore.OData.Results
import Microsoft.AspNetCore.OData.Formatter
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Net.Mime
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {Produces("application/json")}
    ;;; <summary>
    ;;; Customer record
    ;;; </summary>
    ;;; <remarks>
    ;;; OData endpoints for Customer record
    ;;; </remarks>
    public partial class CustomersController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of CustomersController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method CustomersController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {HttpGet("Customers")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Customers>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query the entire collection of records
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetCustomers, @IActionResult
        proc
            mreturn Ok(_DbContext.Customers.AsNoTracking())
        endmethod

        {HttpGet("Customers(CustomerNumber={aCustomerNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Customers),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a single record identified by unique primary key
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aCustomerNumber" example="355232">Customer number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetCustomersByPK, @SingleResult<Customers>
            required in aCustomerNumber, int
        proc
            mreturn new SingleResult<Customers>(_DbContext.Customers.AsNoTracking().FindQuery<Customers>(_DbContext,aCustomerNumber))
        endmethod

        {HttpGet("Customers(State={aState})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Customers>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key State
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aState" example="MO">State</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetCustomersByState, @IActionResult
            required in aState, String
        proc
            data result = _DbContext.Customers.AsNoTracking().FindAlternate("State",aState)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Customers(ZipCode={aZipCode})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Customers>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Zip
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aZipCode" example="64127">Zip code</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetCustomersByZip, @IActionResult
            required in aZipCode, int
        proc
            data result = _DbContext.Customers.AsNoTracking().FindAlternate("ZipCode",aZipCode)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Customers(PaymentTermsCode={aPaymentTermsCode})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Customers>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key PaymentTerms
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aPaymentTermsCode" example="30">Payment terms code</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetCustomersByPaymentTerms, @IActionResult
            required in aPaymentTermsCode, String
        proc
            data result = _DbContext.Customers.AsNoTracking().FindAlternate("PaymentTermsCode",aPaymentTermsCode)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Customers),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {HttpPost("Customers")}
        ;;; <summary>
        ;;; Create a new record (automatically assigned primary key)
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PostCustomers, @IActionResult
            {FromBody}
            required in aCustomers, @Customers
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("CustomerNumber")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aCustomers)

            ;;Add the new customers
            try
            begin
                _DbContext.Customers.Add(aCustomers)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(aCustomers)

        endmethod

        {HttpPut("Customers(CustomerNumber={aCustomerNumber})")}
        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Update a record if it exists otherwise create a new record (primary key provided by client)
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aCustomerNumber" example="355232">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="201">Created. The entity was created but no data is being returned.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PutCustomers, @IActionResult
            required in aCustomerNumber, int
            {FromBody}
            required in aCustomers, @Customers
        proc

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aCustomers.CustomerNumber = aCustomerNumber

            try
            begin
                ;;Add and commit
                data existing = _DbContext.Customers.Find(aCustomerNumber)
                if(existing == ^null) then
                begin
                    _DbContext.Customers.Add(aCustomers)
                    _DbContext.SaveChanges()
                    mreturn Created(aCustomers)
                end
                else
                begin
                    aCustomers.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {HttpPatch("Customers(CustomerNumber={aCustomerNumber})")}
        {Consumes(MediaTypeNames.Application.Json)}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Patch (partial update) an existing record
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aCustomerNumber" example="355232">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="204">No content. The operation was successful but no data is being returned.</response>
        ;;; <response code="400">Bad request. The request was malformed or contained inappropriate content.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method PatchCustomers, @IActionResult
            required in aCustomerNumber, int
            {FromBody}
            required in aCustomers, @JsonPatchDocument<Customers>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing customers
            try
            begin
                ;;Get the customers to be updated
                data customersToUpdate = _DbContext.Customers.Find(aCustomerNumber)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(customersToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the customers we read
                aCustomers.ApplyTo(customersToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.Customers.Update(customersToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {HttpDelete("Customers(CustomerNumber={aCustomerNumber})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        ;;; <summary>
        ;;; Delete a record
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aCustomerNumber" example="355232">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="204">No content. The operation was successful but no data is being returned.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method DeleteCustomers, @IActionResult
            required in aCustomerNumber, int
        proc
            ;;Get the customers to be deleted
            data customersToRemove = _DbContext.Customers.Find(aCustomerNumber)

            ;;Did we find it?
            if (customersToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.Customers.Remove(customersToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace
