;;*****************************************************************************
;;
;; Title:       BridgeMethodsController.dbl
;;
;; Description: This class defines a WebAPI controller that exposes
;;              various endpoints used to execute routines via the
;;              Harmony Core Traditional Bridge mechanism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Mvc
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.Options
import Newtonsoft.Json
import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import BridgeMethods

import Services.Controllers

namespace Services.Controllers

    {Route("BridgeMethods")}
    public partial class BridgeMethodsController extends ControllerBase

        ;;Services provided via dependency injection
        private _BridgeMethodsService, @BridgeMethodsService
        private _AppSettings, @IOptions<Services.Models.AppSettings>

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="aBridgeMethodsService">BridgeMethodsService instance provided via dependency injection</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method BridgeMethodsController
            aBridgeMethodsService, @BridgeMethodsService
            aAppSettings, @IOptions<Services.Models.AppSettings>
        proc
            _BridgeMethodsService = aBridgeMethodsService
            _AppSettings = aAppSettings
        endmethod

        {HttpPost}
        {Route("AddTwoNumbers")}
        ;;; <summary>
        ;;; Add two numbers
        ;;; </summary>
        ;;; <returns></returns>
        public async method AddTwoNumbers, @Task<ActionResult<AddTwoNumbers_Response>>
            {FromBody}
            required in aRequest, @AddTwoNumbers_Request
        proc
            mreturn ok(await _BridgeMethodsService.AddTwoNumbers(aRequest))
        endmethod

        {HttpPost}
        {Route("GetCustomer")}
        ;;; <summary>
        ;;; Get a customer
        ;;; </summary>
        ;;; <returns></returns>
        public async method GetCustomer, @Task<ActionResult<GetCustomer_Response>>
            {FromBody}
            required in aRequest, @GetCustomer_Request
        proc
            mreturn ok(await _BridgeMethodsService.GetCustomer(aRequest))
        endmethod

        {HttpGet}
        {Route("GetEnvironment")}
        ;;; <summary>
        ;;; Get environment string
        ;;; </summary>
        ;;; <returns>Returned environment string</returns>
        public async method GetEnvironment, @Task<ActionResult<GetEnvironment_Response>>
        proc
            mreturn ok(await _BridgeMethodsService.GetEnvironment())
        endmethod

        {HttpPost}
        {Route("GetLogicalName")}
        ;;; <summary>
        ;;; Get a logical names value
        ;;; </summary>
        ;;; <returns></returns>
        public async method GetLogicalName, @Task<ActionResult<GetLogicalName_Response>>
            {FromBody}
            required in aRequest, @GetLogicalName_Request
        proc
            mreturn ok(await _BridgeMethodsService.GetLogicalName(aRequest))
        endmethod

    endclass

endnamespace
