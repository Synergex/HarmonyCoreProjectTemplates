;;*****************************************************************************
;;
;; Title:       TraditionalBridgeHost.dbl
;;
;; Description: A program to host a Harmony Core Traditional Bridge environment
;;              that exposes traditional Synergy business logic to a Harmony
;;              Core RESTful web service
;;
;;*****************************************************************************

import Harmony.TraditionalBridge
import Json
import TraditionalBridge
import TraditionalBridge.Dispatchers
import TraditionalBridge.Helpers

main host

    record
        ttChan,         i4                      ;;Terminal channel number
        length,         int                     ;;Length of a string
        tmpa,           a10                     ;;Temporary alpha variable
        group now,      a20                     ;;Current date and time for log file name
          datetimenow,  d14 @now
        endgroup
        logLevel,       int, 2                  ;;Logging level. 2 is normal logging, 6 is highest logging.
        logFileName,    string                  ;;Log file name
        dispatcher,     @SuperRoutineDispatcher ;;Method dispatcher instance
    endrecord

    ;Used for open channel tracking
    common
        chtrk_enabled,  boolean
        chtrk_tt_chn,   i4
        chtrx_log_chn,  i4
    endcommon
proc
    try
    begin
        ;;Configure the environment and open the terminal channel.
        ;;Remember this (STDIN) is the mechanism by which Harmony Core will send
        ;;us requests, and is the mechanism by which we will issue responses.

        xcall flags(1907050020)
        open(ttChan=0,o,"TT:")

        ;;Does the environment define the logging level?
        getlog("HARMONY_LOG_LEVEL", tmpa, length)
        if (length) then
        begin
            logLevel = %integer(tmpa)
        end
        else
        begin
            ;Levels are 1 to 6, 2 is normal logging, 6 is highest logging
            logLevel = 2
        end
     
        ;;Define the log file name
        now = %datetime
        logFileName = %string(^d(datetimenow),"XXXX-XX-XX_XX-XX-XX") + "_BRIDGE_" + %string(%jbno) + ".LOG"

        ;;Initiate logging
        Logger.Instance = new Logger(logFileName, logLevel, false)
        
        ;;Is channel tracking enabled?
        xcall getlog("CHECK_OPEN_CHANNELS",tmpa,length)
        chtrk_enabled = (length>0 && tmpa=="YES")

        ;;Make our two channels available to channel tracking logic in the method wrappers
        chtrk_tt_chn = ttChan
        chtrx_log_chn = Logger.Instance.LogChannel

        ;;Is stuck process tracking enabled?
        xcall getlog("STUCK_PROCESS_SECONDS",tmpa,length)
        if (length)
        begin
            try
            begin
                StuckProcessTracking.DeadlineSeconds = %integer(tmpa(1:length))
            end
            catch (e, @Exception)
            begin
                StuckProcessTracking.DeadlineSeconds = 0
            end
            endtry
        end

        ;;Create a new instance of the main "dispather" class
        dispatcher = new SuperRoutineDispatcher(MethodDispatcher.GetDispatchers())
        
        ;;Issue the "READY" message.
        ;;Harmony Core looks for this and considers the connection active when it sees it
        puts(ttChan, "READY" + %char(13)+ %char(10))

        ;;Start dispatching requests
        dispatcher.Dispatch(ttChan)

    end
    catch(ex, @Exception)
    begin
        ;;If anything failed, log an error if we can
        if (Logger.Instance != ^null)
        begin
            Logger.Instance.Log("DISPATCHER EXITED with exception" + ex.ToString())
        end
    end
    endtry
    
    ;;Close the log
    if (Logger.Instance != ^null)
    begin
        Logger.Instance.CloseLog()
    end

    stop

endmain

.noproto

;;; Override the UI Toolkit U_ABORT routine and make it log to the traditional bridge log
;;; </summary>
;;; <param name="a_msg1">Message line 1</param>
;;; <param name="a_msg2">Message line 2 (optional)</param>
;;; <param name="a_msg3">Message line 3 (optional)</param>
;;; <param name="a_msg4">Message line 4 (optional)</param>
;;; <param name="a_msg5">Message line 5 (optional)</param>
subroutine U_ABORT
    in req a_msg1, a
    in opt a_msg2, a
    in opt a_msg3, a
    in opt a_msg4, a
    in opt a_msg5, a
proc
    if(Logger.Instance != ^null)
        Logger.Instance.Log("U_ABORT was called: " + a_msg1)
    stop
endsubroutine

;;; <summary>
;;; Override the UI Toolkit U_MESSAGE routine and make it log to the traditional bridge log
;;; </summary>
;;; <param name="a_msg">Message to display</param>
;;; <param name="a_wflg_1"></param>
;;; <param name="a_wflg_2"></param>
subroutine U_MESSAGE
    in req a_msg,    a
    in opt a_wflg_1, n
    in opt a_wflg_2, n
proc
    if(Logger.Instance != ^null)
        Logger.Instance.Log("U_MESSAGE was called: " + a_msg)
    xreturn
endsubroutine

.proto
