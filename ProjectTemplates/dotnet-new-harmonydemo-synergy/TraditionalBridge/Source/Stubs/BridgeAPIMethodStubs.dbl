;;*****************************************************************************
;;
;; Title:       BridgeAPIMethodStubs.dbl
;;
;; Description: Method stubs for interface BridgeAPI
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System.Collections
import TraditionalBridge.Models

;;--------------------------------------------------------------------------------------------------
;; GetCustomer (Get a customer)
;;
{xfMethod(name="GetCustomer",id="GetCustomer",interface="BridgeAPI",elb="EXE:bridgeapi")}
;;; <summary>
;;; Get a customer
;;; </summary>
;;; <param name="CustomerID">Customer ID</param>
;;; <param name="CustomerRecord">Customer record</param>
;;; <param name="ErrorMessage">Error message if result is ERROR</param>
;;; <returns>Returns OK or ERROR</returns>
function GetCustomer, STRING
    {xfParameter(name="CustomerID")}
    required in    CustomerID, d6
    {xfParameter(name="CustomerRecord")}
    required out   CustomerRecord, strCustomers
    {xfParameter(name="ErrorMessage")}
    required out   ErrorMessage, string
    stack record
        retval, string
    endrecord
proc
    init retval
    freturn retval
endfunction

;;--------------------------------------------------------------------------------------------------
;; GetEnvironment (Display the servers Synergy environment)
;;
{xfMethod(name="GetEnvironment",id="GetEnvironment",interface="BridgeAPI",elb="EXE:bridgeapi")}
;;; <summary>
;;; Display the servers Synergy environment
;;; </summary>
;;; <param name="EnvironmentString">Returned environment string</param>
;;; <param name="ErrorMessage">Returned error message if return value is ERROR</param>
;;; <returns>Return value OK or ERROR</returns>
function GetEnvironment, STRING
    {xfParameter(name="EnvironmentString")}
    required out   EnvironmentString, string
    {xfParameter(name="ErrorMessage")}
    required out   ErrorMessage, string
    stack record
        retval, string
    endrecord
proc
    init retval
    freturn retval
endfunction

;;--------------------------------------------------------------------------------------------------
;; GetLogicalName (Get the value of a server environment variable)
;;
{xfMethod(name="GetLogicalName",id="GetLogicalName",interface="BridgeAPI",elb="EXE:bridgeapi")}
;;; <summary>
;;; Get the value of a server environment variable
;;; </summary>
;;; <param name="LogicalName"></param>
;;; <param name="TranslatedValue">Returned value of logical name</param>
;;; <param name="ErrorMessage">Returned error message if return value is ERROR</param>
;;; <returns>Return value OK or ERROR</returns>
function GetLogicalName, STRING
    {xfParameter(name="LogicalName")}
    required in    LogicalName, string
    {xfParameter(name="TranslatedValue")}
    required out   TranslatedValue, string
    {xfParameter(name="ErrorMessage")}
    required out   ErrorMessage, string
    stack record
        retval, string
    endrecord
proc
    init retval
    freturn retval
endfunction

;;--------------------------------------------------------------------------------------------------
;; LoremIpsum (A test method that returns Lorem Ipsum data)
;;
{xfMethod(name="LoremIpsumBridge",id="LoremIpsum",interface="BridgeAPI",elb="EXE:bridgeapi")}
;;; <summary>
;;; A test method that returns Lorem Ipsum data
;;; </summary>
;;; <param name="RecordsToReturn"></param>
;;; <param name="Records">Returned records</param>
;;; <param name="ErrorMessage">Error message if return value is ERROR</param>
;;; <returns>Returns OK or ERROR</returns>
function LoremIpsum, STRING
    {xfParameter(name="RecordsToReturn")}
    required in    RecordsToReturn, i4
    {xfParameter(name="Records",collectionType=xfCollectType.string)}
    required out   Records, @ArrayList
    {xfParameter(name="ErrorMessage")}
    required out   ErrorMessage, string
    stack record
        retval, string
    endrecord
proc
    init retval
    freturn retval
endfunction

;;--------------------------------------------------------------------------------------------------
;; StuckProcessTest (Test for the stuck process detection code)
;;
{xfMethod(name="StuckProcessTest",id="StuckProcessTest",interface="BridgeAPI",elb="EXE:bridgeapi")}
;;; <summary>
;;; Test for the stuck process detection code
;;; </summary>
;;; <param name="SecondsToRun">How many seconds should the test run for?</param>
;;; <param name="ErrorMessage">Error message if ReturnValue is ERROR</param>
;;; <returns>Returns OK or ERROR</returns>
function StuckProcessTest, STRING
    {xfParameter(name="SecondsToRun")}
    required in    SecondsToRun, d4
    {xfParameter(name="ErrorMessage")}
    required out   ErrorMessage, string
    stack record
        retval, string
    endrecord
proc
    init retval
    freturn retval
endfunction

