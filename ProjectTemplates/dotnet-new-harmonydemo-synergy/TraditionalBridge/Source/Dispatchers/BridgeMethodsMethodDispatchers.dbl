;;*****************************************************************************
;;
;; Title:       BridgeMethodsMethodDispatchers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Models

.ifdef DBLV11
import System.Text.Json
.define JSON_ELEMENT @JsonElement
.else
.define JSON_ELEMENT @JsonValue
.endc

namespace TraditionalBridge.Dispatchers.BridgeMethods


    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method BridgeMethods.AddTwoNumbers
    ;;; </summary>
    public class AddTwoNumbers_Dispatcher extends RoutineStub


        public method AddTwoNumbers_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED IN number1 d28.10)
                arg1,               d28.10
                ;;Argument 2 (REQUIRED IN number2 d28.2)
                arg2,               d28.2
                ;;Argument 3 (REQUIRED OUT result d28.10)
                arg3,               d28.10
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Prepare variables for arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED IN number1 d28.10)

            arg1 = dispatcher.GetImplied(arguments[1])

            ;;Argument 2 (REQUIRED IN number2 d28.2)

            arg2 = dispatcher.GetImplied(arguments[2])

            ;;Argument 3 (REQUIRED OUT result d28.10)


            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall AddTwoNumbers(arg1,arg2,arg3)

            ;;--------------------------------------------------------------------------------
            ;;Argument 3 (REQUIRED OUT result d28.10)
            
            serializer.ArgumentData(3,arg3,FieldDataType.ImpliedDecimalField,28,10,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method BridgeMethods.GetCustomer
    ;;; </summary>
    public class GetCustomer_Dispatcher extends RoutineStub

        private mStrCustomerMetadata, @DataObjectMetadataBase

        public method GetCustomer_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
            mStrCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED IN CustomerNumber d6)
                arg1,               d6
                ;;Argument 2 (REQUIRED OUT Customer structure @StrCustomer)
                arg2DataObject,     @DataObjectBase
                arg2,               strCustomer
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Prepare variables for arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED IN CustomerNumber d6)

            arg1 = dispatcher.GetDecimal(arguments[1])

            ;;Argument 2 (REQUIRED OUT Customer structure @StrCustomer)


            ;;------------------------------------------------------------
            ;; Call the underlying routine

            xcall GetCustomer(arg1,arg2)

            ;;--------------------------------------------------------------------------------
            ;;Argument 2 (REQUIRED OUT Customer structure @StrCustomer)
            
            ;;Argument 2: Single StrCustomer record
            serializer.ArgumentData(2,arg2,FieldDataType.DataObjectField,161,"CUSTOMERS",true)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method BridgeMethods.GetEnvironment
    ;;; </summary>
    public class GetEnvironment_Dispatcher extends RoutineStub


        public method GetEnvironment_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                returnValue,         STRING
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Prepare variables for arguments

            ;;There are no inbound arguments to process

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            returnValue = %GetEnvironment()

            ;;Function return value
            serializer.ArgumentData(0,%atrim(returnValue),FieldDataType.StringField,,0,false)
        endmethod

    endclass

    ;;-------------------------------------------------------------------------
    ;;; <summary>
    ;;; Dispatcher for method BridgeMethods.GetLogicalName
    ;;; </summary>
    public class GetLogicalName_Dispatcher extends RoutineStub


        public method GetLogicalName_Dispatcher
        proc
            ;;Initialize the meta data for any data objects that are used by parameters to the method
        endmethod

        protected override method DispatchInternal, void
            required in name,       string
            required in callFrame,  JSON_ELEMENT
            required in serializer, @DispatchSerializer
            required in dispatcher, @RoutineDispatcher
            record
                requestId,          int
                arguments,          JSON_ELEMENT
                argumentDefinition, @ArgumentDataDefinition

                ;;Argument 1 (REQUIRED IN aLogicalName string)
                arg1,               string
                returnValue,         STRING
            endrecord


        proc

            ;;------------------------------------------------------------
            ;;Prepare variables for arguments

            arguments = callFrame.GetProperty("params")

            ;;Argument 1 (REQUIRED IN aLogicalName string)

            arg1 = dispatcher.GetText(arguments[1])

            ;;------------------------------------------------------------
            ;; Call the underlying routine

            returnValue = %GetLogicalName(arg1)

            ;;Function return value
            serializer.ArgumentData(0,%atrim(returnValue),FieldDataType.StringField,,0,false)
        endmethod

    endclass

endnamespace

;; This is here to ensure that the TraditionalBridge.Models namespace exists.
;; If the Synergy methods don't expsoe any structure or collection of structure
;; parameters then there won't be anything in the Models folder, and the import above will fail.
namespace TraditionalBridge.Models
    public class BridgeMethodsDummyModel
    endclass
endnamespace

