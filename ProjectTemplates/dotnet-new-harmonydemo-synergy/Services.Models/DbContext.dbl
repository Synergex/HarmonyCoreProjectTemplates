;;*****************************************************************************
;;
;; Title:       DbContext.dbl
;;
;; Description: OData DbContext class
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.EF.Extensions
import Microsoft.EntityFrameworkCore
import System.Collections.Generic
import System.Linq.Expressions
import Services.Models

namespace Services.Models

    ;;; <summary>
    ;;;
    ;;; </summary>
    public partial class DbContext extends Microsoft.EntityFrameworkCore.DbContext

        ;;; <summary>
        ;;; Construct a new DbContext.
        ;;; </summary>
        public method DbContext
            options, @DbContextOptions<DbContext>
            endparams
            parent(options)
        proc

        endmethod

        ;;; <summary>
        ;;; Exposes Customers data.
        ;;; </summary>
        public readwrite property Customers, @DbSet<Customers>

        ;;; <summary>
        ;;; Exposes Items data.
        ;;; </summary>
        public readwrite property Items, @DbSet<Items>

        ;;; <summary>
        ;;; Exposes Orders data.
        ;;; </summary>
        public readwrite property Orders, @DbSet<Orders>

        ;;; <summary>
        ;;; Exposes OrderItems data.
        ;;; </summary>
        public readwrite property OrderItems, @DbSet<OrderItems>

        ;;; <summary>
        ;;; Exposes Vendors data.
        ;;; </summary>
        public readwrite property Vendors, @DbSet<Vendors>

        ;;; <summary>
        ;;;
        ;;; </summary>
        protected override method OnModelCreating, void
            parm, @ModelBuilder
        proc
            parm.Ignore(^typeof(AlphaDesc))
            parm.Ignore(^typeof(DataObjectMetadataBase))

.region "Composite key definitions"

            ;;Entities with a single primary key segment have the key declared to EF via a
            ;;{Key} attribute on the appropriate property in the data model, but only one {key}
            ;;attribute can be used in a class, so keys with multiple segments are defined
            ;;using the "Fluent API" here.

            parm.Entity<OrderItems>().HasKey("OrderNumber","ItemNumber")

.endregion

.region "Tag filtering"

            ;;This code will currently only work for tags with:
            ;;   a single "field .operator. value" expression
            ;;   multiple "field .operator. value" expressions connected by AND operators
            ;;   multiple "field .operator. value" expressions connected by OR operators
            ;;
            ;;The code will not work for multi-part tags that use a combination of AND and OR operators

            data tagExpressions, @List<Tuple<Expression,TagConnector>>

.endregion

.region "Entity Relationships"

            ;;--------------------------------------
            ;; Relationships from CUSTOMERS

            ;; CUSTOMERS.CUSTOMER_NUMBER (one) --> (many) --> (one) ORDERS.CUSTOMER_NUMBER
            ;;    Type          : D
            ;;    From segments : CUSTOMER_NUMBER(D6) 
            ;;    To segments   : CUSTOMER_NUMBER(D6) 

            parm.AddOneToManyToOneRelation<Customers, Orders>("REL_Orders", "KEY_CUSTOMER_NUMBER", "REL_Customer", "KEY_CUSTOMER_NUMBER")
            ;; CUSTOMERS.FAVORITE_ITEM (one) --> (one) ITEMS.ITEM_NUMBER
            ;;    Type          : C
            ;;    From segments : FAVORITE_ITEM(D6) 
            ;;    To segments   : ITEM_NUMBER(D6) 

            parm.AddOneToOneRelation<Customers, Items>("REL_Item", "KEY_FAVORITE_ITEM", "KEY_ITEM_NUMBER")
            ;;--------------------------------------
            ;; Relationships from ITEMS

             ;; ITEMS.VENDOR_NUMBER (many) --> (one) --> (many) VENDORS.VENDOR_NUMBER
             ;;    Type          : A
             ;;    From segments : VENDOR_NUMBER(D6) 
             ;;    To segments   : VENDOR_NUMBER(D6) 

             parm.AddOneToOneToManyRelation<Items, Vendors>("REL_Vendor", "KEY_VENDOR_NUMBER", "REL_Items", "KEY_VENDOR_NUMBER")
            ;; ITEMS.ITEM_NUMBER (one) --> (many) --> (one) ORDER_ITEMS.ITEM_ORDERED
            ;;    Type          : D
            ;;    From segments : ITEM_NUMBER(D6) 
            ;;    To segments   : ITEM_ORDERED(D6) 

            parm.AddOneToManyToOneRelation<Items, OrderItems>("REL_OrderItems", "KEY_ITEM_NUMBER", "REL_Item", "KEY_ITEM_ORDERED")
            ;;--------------------------------------
            ;; Relationships from ORDERS

            ;; ORDERS.ORDER_NUMBER (one) --> (many) --> (one) ORDER_ITEMS.ORDER_NUMBER_AND_LINE_ITEM
            ;;    Type          : D
            ;;    From segments : ORDER_NUMBER(D6) 
            ;;    To segments   : ORDER_NUMBER(D6) 

            parm.AddOneToManyToOneRelation<Orders, OrderItems>("REL_OrderItems", "KEY_ORDER_NUMBER", "REL_Order", "KEY_ORDER_NUMBER_AND_LINE_ITEM")
             ;; ORDERS.CUSTOMER_NUMBER (many) --> (one) --> (many) CUSTOMERS.CUSTOMER_NUMBER
             ;;    Type          : A
             ;;    From segments : CUSTOMER_NUMBER(D6) 
             ;;    To segments   : CUSTOMER_NUMBER(D6) 

             parm.AddOneToOneToManyRelation<Orders, Customers>("REL_Customer", "KEY_CUSTOMER_NUMBER", "REL_Orders", "KEY_CUSTOMER_NUMBER")
            ;;--------------------------------------
            ;; Relationships from ORDER_ITEMS

             ;; ORDER_ITEMS.ORDER_NUMBER_AND_LINE_ITEM (many) --> (one) --> (many) ORDERS.ORDER_NUMBER
             ;;    Type          : A
             ;;    From segments : ORDER_NUMBER(D6) 
             ;;    To segments   : ORDER_NUMBER(D6) 

             parm.AddOneToOneToManyRelation<OrderItems, Orders>("REL_Order", "KEY_ORDER_NUMBER_AND_LINE_ITEM", "REL_OrderItems", "KEY_ORDER_NUMBER")
             ;; ORDER_ITEMS.ITEM_ORDERED (many) --> (one) --> (many) ITEMS.ITEM_NUMBER
             ;;    Type          : A
             ;;    From segments : ITEM_ORDERED(D6) 
             ;;    To segments   : ITEM_NUMBER(D6) 

             parm.AddOneToOneToManyRelation<OrderItems, Items>("REL_Item", "KEY_ITEM_ORDERED", "REL_OrderItems", "KEY_ITEM_NUMBER")
            ;;--------------------------------------
            ;; Relationships from VENDORS

            ;; VENDORS.VENDOR_NUMBER (one) --> (many) --> (one) ITEMS.VENDOR_NUMBER
            ;;    Type          : D
            ;;    From segments : VENDOR_NUMBER(D6) 
            ;;    To segments   : VENDOR_NUMBER(D6) 

            parm.AddOneToManyToOneRelation<Vendors, Items>("REL_Items", "KEY_VENDOR_NUMBER", "REL_Vendor", "KEY_VENDOR_NUMBER")
.endregion

            ;;-----------------------------------------------
            ;;If we have a OnModelCreatingCustom method, call it

            OnModelCreatingCustom(parm)

            ;;-----------------------------------------------
            ;;All done, call the code in our base class

            parent.OnModelCreating(parm)

        endmethod

        ;;Declare the OnModelCreatingCustom partial method
        ;;This method can be implemented in a partial class to provide custom code
        partial static method OnModelCreatingCustom, void
            builder, @ModelBuilder
        endmethod

    endclass

endnamespace