;;*****************************************************************************
;;
;; Title:       EfProviderConfig.dbl
;;
;; Description: EF Provider configuration code
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.FileIO
import Harmony.Core.Interface
import Harmony.Core.Utility
import Microsoft.EntityFrameworkCore
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.DependencyInjection
import Microsoft.Extensions.DependencyInjection.Extensions
import Microsoft.Extensions.Logging
import Microsoft.Extensions.Options
import Microsoft.Extensions.Primitives
import System.Collections.Generic
import System.IO
import System.Linq
import System.Text
import System.Threading.Tasks
import SynergyEfProvider.Models

namespace SynergyEfProvider

    public partial static class EfProviderConfig

        public static method ConfigureProvider, void
            services, @IServiceCollection 
        proc

            ;;------------------------------------------------------------------------------------------
            ;;Configure FileChannelManager

            services.AddSingleton<IFileChannelManager, FileChannelManager>()

            ;;------------------------------------------------------------------------------------------
            ;;Configure DataObjectProvider

            lambda AddDataObjectMappings(serviceProvider)
            begin
                data objectProvider = new DataObjectProvider(serviceProvider.GetService<IFileChannelManager>())
                objectProvider.AddDataObjectMapping<Customer>("DAT:customers.ism", FileOpenMode.UpdateIndexed)
                objectProvider.AddDataObjectMapping<Item>("DAT:items.ism", FileOpenMode.UpdateIndexed)
                objectProvider.AddDataObjectMapping<Order>("DAT:orders.ism", FileOpenMode.UpdateIndexed)
                objectProvider.AddDataObjectMapping<OrderItem>("DAT:order_items.ism", FileOpenMode.UpdateIndexed)
                objectProvider.AddDataObjectMapping<Vendor>("DAT:vendors.ism", FileOpenMode.UpdateIndexed)
                mreturn objectProvider
            end

            services.AddSingleton<IDataObjectProvider>(AddDataObjectMappings)

            ;;------------------------------------------------------------------------------------------
            ;;Configure DBContext

            lambda ConfigureDBContext(sp,opts)
            begin
                HarmonyDbContextOptionsExtensions.UseHarmonyDatabase(opts, sp.GetService<IDataObjectProvider>())
            end

            services.AddDbContextPool<SynergyEfProvider.DBContext>(ConfigureDBContext)

            ;;------------------------------------------------------------------------------------------
            ;;If there is a ConfigureProviderCustom method, call it

            ConfigureCustom(services)


        endmethod

.region "Partial method extensibility points"

        ;;; <summary>
        ;;; Declare the ConfigueCustom partial method.
        ;;; Developers can implement this method in a partial class to provide custom services.
        ;;; </summary>
        ;;; <param name="services"></param>
        partial static method ConfigureCustom, void
            services, @IServiceCollection
        endmethod

.endregion

    endclass

endnamespace
