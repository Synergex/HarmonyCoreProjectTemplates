;;*****************************************************************************
;;
;; Title:       ItemsController.dbl
;;
;; Description: OData controller for the ITEMS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    ;;; <summary>
    ;;; OData controller for Items
    ;;; </summary>
    public partial class ItemsController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of ItemsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method ItemsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
			this._AppSettings = aAppSettings
        endmethod

        {ODataRoute("Items")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Items
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItems, @IActionResult
        proc
            mreturn Ok(_DbContext.Items.AsNoTracking())
        endmethod

        {ODataRoute("Items(ItemNumber={aItemNumber})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single Item by primary key.
        ;;; </summary>
        ;;; <param name="aItemNumber">Item number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItem, @SingleResult<Item>
            {FromODataUri}
            required in aItemNumber, int
        proc
            mreturn new SingleResult<Item>(_DbContext.Items.AsNoTracking().FindQuery<Item>(_DbContext, aItemNumber))
        endmethod

        {ODataRoute("Items(VendorNumber={aVendorNumber})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get items by alternate key key VendorNumber.
        ;;; </summary>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItemsByVendorNumber, @IActionResult
            {FromODataUri}
            required in aVendorNumber, int
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("VendorNumber",aVendorNumber)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Items(FlowerColor={aFlowerColor})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get items by alternate key key Color.
        ;;; </summary>
        ;;; <param name="aFlowerColor">Flower color</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItemsByColor, @IActionResult
            {FromODataUri}
            required in aFlowerColor, String
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("FlowerColor",aFlowerColor)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Items(Size={aSize})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get items by alternate key key Size.
        ;;; </summary>
        ;;; <param name="aSize">Size in gallons</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItemsBySize, @IActionResult
            {FromODataUri}
            required in aSize, int
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("Size",aSize)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Items(CommonName={aCommonName})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get items by alternate key key Name.
        ;;; </summary>
        ;;; <param name="aCommonName">Common name</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItemsByName, @IActionResult
            {FromODataUri}
            required in aCommonName, String
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("CommonName",aCommonName)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod


        {ODataRoute("Items({key})/VendorNumber")}
        ;;; <summary>
        ;;; Get the VendorNumber property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Vendor number</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetVendorNumber, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.VendorNumber)
        endmethod

        {ODataRoute("Items({key})/Size")}
        ;;; <summary>
        ;;; Get the Size property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Size in gallons</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetSize, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Size)
        endmethod

        {ODataRoute("Items({key})/CommonName")}
        ;;; <summary>
        ;;; Get the CommonName property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Common name</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCommonName, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.CommonName)
        endmethod

        {ODataRoute("Items({key})/LatinName")}
        ;;; <summary>
        ;;; Get the LatinName property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Latin name</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetLatinName, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.LatinName)
        endmethod

        {ODataRoute("Items({key})/ZoneCode")}
        ;;; <summary>
        ;;; Get the ZoneCode property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Hardiness zone code</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetZoneCode, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.ZoneCode)
        endmethod

        {ODataRoute("Items({key})/Type")}
        ;;; <summary>
        ;;; Get the Type property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Type code</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetType, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Type)
        endmethod

        {ODataRoute("Items({key})/Flowering")}
        ;;; <summary>
        ;;; Get the Flowering property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Flowering?</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetFlowering, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Flowering)
        endmethod

        {ODataRoute("Items({key})/FlowerColor")}
        ;;; <summary>
        ;;; Get the FlowerColor property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Flower color</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetFlowerColor, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.FlowerColor)
        endmethod

        {ODataRoute("Items({key})/Shape")}
        ;;; <summary>
        ;;; Get the Shape property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Shape</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetShape, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Shape)
        endmethod

        {ODataRoute("Items({key})/MaxHeight")}
        ;;; <summary>
        ;;; Get the MaxHeight property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Maximum height (in inches)</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetMaxHeight, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.MaxHeight)
        endmethod

        {ODataRoute("Items({key})/MaxWidth")}
        ;;; <summary>
        ;;; Get the MaxWidth property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Maximum width (in inches)</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetMaxWidth, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.MaxWidth)
        endmethod

        {ODataRoute("Items({key})/WaterRequirement")}
        ;;; <summary>
        ;;; Get the WaterRequirement property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Water requirements</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetWaterRequirement, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.WaterRequirement)
        endmethod

        {ODataRoute("Items({key})/SunRequirement")}
        ;;; <summary>
        ;;; Get the SunRequirement property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Sun requirements</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetSunRequirement, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.SunRequirement)
        endmethod

        {ODataRoute("Items({key})/BinLocation")}
        ;;; <summary>
        ;;; Get the BinLocation property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Bin/aisle</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetBinLocation, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.BinLocation)
        endmethod

        {ODataRoute("Items({key})/QtyOnHand")}
        ;;; <summary>
        ;;; Get the QtyOnHand property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Qty on hand</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetQtyOnHand, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.QtyOnHand)
        endmethod

        {ODataRoute("Items({key})/QtyAllocated")}
        ;;; <summary>
        ;;; Get the QtyAllocated property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Qty allocated</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetQtyAllocated, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.QtyAllocated)
        endmethod

        {ODataRoute("Items({key})/QtyOnOrder")}
        ;;; <summary>
        ;;; Get the QtyOnOrder property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Qty on order</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetQtyOnOrder, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.QtyOnOrder)
        endmethod

        {ODataRoute("Items({key})/ReorderLevel")}
        ;;; <summary>
        ;;; Get the ReorderLevel property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Reorder point</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetReorderLevel, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.ReorderLevel)
        endmethod

        {ODataRoute("Items({key})/UnitPrice")}
        ;;; <summary>
        ;;; Get the UnitPrice property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Unit price</param>
        ;;; <returns>
        ;;; Returns a decimal containing the value of the requested property.
        ;;;</returns>
        public method GetUnitPrice, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.UnitPrice)
        endmethod

        {ODataRoute("Items({key})/CostPrice")}
        ;;; <summary>
        ;;; Get the CostPrice property of a single Item, by primary key.
        ;;; </summary>
        ;;; <param name="key">Item cost</param>
        ;;; <returns>
        ;;; Returns a decimal containing the value of the requested property.
        ;;;</returns>
        public method GetCostPrice, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = _DbContext.Items.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.CostPrice)
        endmethod

        {ODataRoute("Items")}
        ;;; <summary>
        ;;; Create a new item (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostItem, @IActionResult
            {FromBody}
            required in aItem, @Item
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("ItemNumber")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aItem)

            ;;Add the new item
            _DbContext.Items.Add(aItem)
            _DbContext.SaveChanges(keyFactory)

            mreturn Created(aItem)

        endmethod

        {ODataRoute("Items(ItemNumber={aItemNumber})")}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a item.
        ;;; </summary>
        ;;; <param name="aItemNumber">Item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutItem, @IActionResult
            {FromODataUri}
            required in aItemNumber, int
            {FromBody}
            required in aItem, @Item
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aItem.ItemNumber = aItemNumber

            try
            begin
                ;;Add and commit
                data existing = _DbContext.Items.Find(aItemNumber)
                if(existing == ^null) then
                begin
                    _DbContext.Items.Add(aItem)
                    _DbContext.SaveChanges()
                    mreturn Created(aItem)
                end
                else
                begin
                    aItem.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

        endmethod

        {ODataRoute("Items(ItemNumber={aItemNumber})")}
        ;;; <summary>
        ;;; Patch  (partial update) a item.
        ;;; </summary>
        ;;; <param name="aItemNumber">Item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchItem, @IActionResult
            {FromODataUri}
            required in aItemNumber, int
            {FromBody}
            required in aItem, @JsonPatchDocument<Item>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Patch the existing item
            try
            begin
                ;;Get the item to be updated
                data itemToUpdate = _DbContext.Items.Find(aItemNumber)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(itemToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the item we read
                aItem.ApplyTo(itemToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.Items.Update(itemToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

            mreturn NoContent()

        endmethod

        {ODataRoute("Items(ItemNumber={aItemNumber})")}
        ;;; <summary>
        ;;; Delete a item.
        ;;; </summary>
        ;;; <param name="aItemNumber">Item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteItem, @IActionResult
            {FromODataUri}
            required in aItemNumber, int
        proc
            ;;Get the item to be deleted
            data itemToRemove = _DbContext.Items.Find(aItemNumber)

            ;;Did we find it?
            if (itemToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.Items.Remove(itemToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod

    endclass

endnamespace