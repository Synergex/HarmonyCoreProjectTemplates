;;*****************************************************************************
;;
;; Title:       OrderItemsController.dbl
;;
;; Description: OData controller for the ORDER_ITEMS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    ;;; <summary>
    ;;; OData controller for OrderItems
    ;;; </summary>
    public partial class OrderItemsController extends ODataController
    
        public readwrite property DBContext, @Services.Models.DBContext
        public readwrite property ServiceProvider, @IServiceProvider

        ;;; <summary>
        ;;; Constructs a new instance of OrderItemsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        public method OrderItemsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
        proc
            this.DBContext = aDbContext
            this.ServiceProvider = aServiceProvider
        endmethod

        {ODataRoute("OrderItems")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all OrderItems
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItems, @IActionResult
        proc
            mreturn Ok(DBContext.OrderItems.AsNoTracking())
        endmethod

        {ODataRoute("OrderItems(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single OrderItem by primary key.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItem, @SingleResult<OrderItem>
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
        proc
            mreturn new SingleResult<OrderItem>(DBContext.OrderItems.AsNoTracking().FindQuery<OrderItem>(DBContext, aOrderNumber,aItemNumber))
        endmethod

        {ODataRoute("OrderItems(ItemOrdered={aItemOrdered})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orderItems by alternate key key ItemOrdered.
        ;;; </summary>
        ;;; <param name="aItemOrdered">Item ordered</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsByItemOrdered, @IActionResult
            {FromODataUri}
            required in aItemOrdered, int
        proc
            data result = DBContext.OrderItems.AsNoTracking().FindAlternate("ItemOrdered",aItemOrdered)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("OrderItems(DateShipped={aDateShipped})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orderItems by alternate key key DateShipped.
        ;;; </summary>
        ;;; <param name="aDateShipped">Date shipped</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsByDateShipped, @IActionResult
            {FromODataUri}
            required in aDateShipped, DateTime
        proc
            data result = DBContext.OrderItems.AsNoTracking().FindAlternate("DateShipped",aDateShipped)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("OrderItems(InvoiceNumber={aInvoiceNumber})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orderItems by alternate key key InvoiceNumber.
        ;;; </summary>
        ;;; <param name="aInvoiceNumber">Invoice number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsByInvoiceNumber, @IActionResult
            {FromODataUri}
            required in aInvoiceNumber, int
        proc
            data result = DBContext.OrderItems.AsNoTracking().FindAlternate("InvoiceNumber",aInvoiceNumber)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod



        {ODataRoute("OrderItems(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})/ItemOrdered")}
        ;;; <summary>
        ;;; Get the ItemOrdered property of a single OrderItem, by primary key.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetItemOrdered, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
        proc
            data result = DBContext.OrderItems.Find(aOrderNumber,aItemNumber)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.ItemOrdered)
        endmethod

        {ODataRoute("OrderItems(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})/QuantityOrdered")}
        ;;; <summary>
        ;;; Get the QuantityOrdered property of a single OrderItem, by primary key.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetQuantityOrdered, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
        proc
            data result = DBContext.OrderItems.Find(aOrderNumber,aItemNumber)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.QuantityOrdered)
        endmethod

        {ODataRoute("OrderItems(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})/UnitPrice")}
        ;;; <summary>
        ;;; Get the UnitPrice property of a single OrderItem, by primary key.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>
        ;;; Returns a decimal containing the value of the requested property.
        ;;;</returns>
        public method GetUnitPrice, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
        proc
            data result = DBContext.OrderItems.Find(aOrderNumber,aItemNumber)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.UnitPrice)
        endmethod

        {ODataRoute("OrderItems(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})/DateShipped")}
        ;;; <summary>
        ;;; Get the DateShipped property of a single OrderItem, by primary key.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>
        ;;; Returns a DateTime containing the value of the requested property.
        ;;;</returns>
        public method GetDateShipped, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
        proc
            data result = DBContext.OrderItems.Find(aOrderNumber,aItemNumber)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.DateShipped)
        endmethod

        {ODataRoute("OrderItems(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})/InvoiceNumber")}
        ;;; <summary>
        ;;; Get the InvoiceNumber property of a single OrderItem, by primary key.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetInvoiceNumber, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
        proc
            data result = DBContext.OrderItems.Find(aOrderNumber,aItemNumber)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.InvoiceNumber)
        endmethod

        {ODataRoute("OrderItems(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})")}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a orderItem.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutOrderItem, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
            {FromBody}
            required in aOrderItem, @OrderItem
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aOrderItem.OrderNumber = aOrderNumber
            aOrderItem.ItemNumber = aItemNumber

            try
            begin
                ;;Add and commit
                data existing = DBContext.OrderItems.Find(aOrderNumber,aItemNumber)
                if(existing == ^null) then
                begin
                    DBContext.OrderItems.Add(aOrderItem)
                    DBContext.SaveChanges()
                    mreturn Created(aOrderItem)
                end
                else
                begin
                    aOrderItem.CopyTo(existing)
                    DBContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

        endmethod

        {ODataRoute("OrderItems(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})")}
        ;;; <summary>
        ;;; Patch  (partial update) a orderItem.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchOrderItem, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
            {FromBody}
            required in aOrderItem, @JsonPatchDocument<OrderItem>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Patch the existing orderItem
            try
            begin
                ;;Get the orderItem to be updated
                data orderItemToUpdate = DBContext.OrderItems.Find(aOrderNumber,aItemNumber)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(orderItemToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the orderItem we read
                aOrderItem.ApplyTo(orderItemToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                DBContext.OrderItems.Update(orderItemToUpdate)
                DBContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

            mreturn NoContent()

        endmethod

        {ODataRoute("OrderItems(OrderNumber={aOrderNumber},ItemNumber={aItemNumber})")}
        ;;; <summary>
        ;;; Delete a orderItem.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <param name="aItemNumber">Line item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteOrderItem, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromODataUri}
            required in aItemNumber, int
        proc
            ;;Get the orderItem to be deleted
            data orderItemToRemove = DBContext.OrderItems.Find(aOrderNumber,aItemNumber)

            ;;Did we find it?
            if (orderItemToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            DBContext.OrderItems.Remove(orderItemToRemove)
            DBContext.SaveChanges()

            mreturn NoContent()

        endmethod

    endclass

endnamespace